services:
  # Servicio database
  database:
    image: postgres:16
    container_name: mi-bd
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Servicio de aplicaci√≥n Go
  backend:
    build:
      context: .
      dockerfile: Dockerfile.go
    container_name: go-blog-backend
    depends_on:
      database:
        condition: service_healthy
    environment:
      GO_ENV: ${GO_ENV}
      PORT: ${PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
    networks:
      - app-network
    restart: unless-stopped

  # Servicio frontend
  frontend:
    image: caddy:latest
    container_name: go-blog-caddy
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  app-network:
    driver: bridge
